# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.8.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5MWm8bt5It1HDS794BE8NBNeWbpJWRn

# Задание 1

Задача: Создать чат бота для получения информации об исследованиях космоса

Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:

- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.
- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.
- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.
- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.
Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.

Требования:
- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.
- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.
- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.
- Представление данных: Представляйте данные в четкой и организованной форме.
- Опция выхода: позволяет пользователям выходить из приложения в любое время.
"""

import requests
from datetime import datetime

NASA_API_KEY = "HIXK00G5Qn5BCY4QbDH35FEMXaPxi7A2kLlMBD7v"


def get_apod():
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        print(f"Название: {data['title']}")
        print(f"Дата: {data['date']}")
        print(f"Описание: {data['explanation']}")
        print(f"URL изображения: {data['url']}")

    except requests.exceptions.RequestException as e:
        print("Ошибка", e)


def get_mars_photos():
    date = input("Дата в формате YYYY-MM-DD: ")
    camera = input("Тип камеры (FHAZ, RHAZ, MAST): ")
    url = f"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date={date}&camera={camera}&api_key={NASA_API_KEY}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        photos = response.json().get("photos", [])

        if not photos:
            print("Фото не найден")

        for photo in photos:
            print(f"ID: {photo['id']}")
            print(f"Дата: {photo['earth_date']}")
            print(f"URL изображения: {photo['img_src']}\n")

    except requests.exceptions.RequestException as e:
        print("Ошибка:", e)


def get_near_earth_objects():
    date = input("Дта в формате YYYY-MM-DD: ")
    url = f"https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={NASA_API_KEY}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        objects = response.json().get("near_earth_objects", {}).get(date, [])

        if not objects:
            print("Объекты не найдены.")

        for obj in objects:
            print(f"Название: {obj['name']}")
            print(f"Диаметр min: {obj['estimated_diameter']['meters']['estimated_diameter_min']} м")
            print(f"Диаметр max: {obj['estimated_diameter']['meters']['estimated_diameter_max']} м")
            print(f"Опасен ли: {'Да' if obj['is_potentially_hazardous_asteroid'] else 'Нет'}")
            print(f"Скорость: {obj['close_approach_data'][0]['relative_velocity']['kilometers_per_hour']} км/ч\n")

    except requests.exceptions.RequestException as e:
        print("Ошибка:", e)


def get_space_weather():
    url = f"https://api.nasa.gov/DONKI/FLR?startDate=2023-01-01&endDate={datetime.today().strftime('%Y-%m-%d')}&api_key={NASA_API_KEY}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        events = response.json()

        if not events:
            print("Нет данных.")

        for event in events:
            print(f"Дата: {event['beginTime']}")
            print(f"Классификация: {event['classType']}")
            print(f"Источник: {event['sourceLocation']}\n")

    except requests.exceptions.RequestException as e:
        print("Ошибка:", e)


def main():
    while True:
        print("\nВыберите действие:")
        print("1. Астрономическая картинка дня (APOD)")
        print("2. Фотографии с марсохода")
        print("3. Объекты, сближающиеся с Землей")
        print("4. Данные о космической погоде")
        print("5. Выйти")

        choice = input("Введите номер действия: ")

        if choice == '1':
            get_apod()
        elif choice == '2':
            get_mars_photos()
        elif choice == '3':
            get_near_earth_objects()
        elif choice == '4':
            get_space_weather()
        elif choice == '5':
            print("Выход из программы.")
            break
        else:
            print("Попробуйте снова.")


if __name__ == "__main__":
    main()

"""# Задание 2

Описание задачи

Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:

Требования:
Извлекать произведения искусства:

- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.
Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.
Фильтровать произведения искусства:

- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).
Отображать подробную информацию об оформлении:

- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.
После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.
Разбивка на страницы и взаимодействие с пользователем:

- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.

Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.

Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы.
"""

import requests


def fetch_artworks(page=1, artist=None):
    url = f"https://api.artic.edu/api/v1/artworks?page={page}&limit=10"
    data = requests.get(url).json()['data']

    return [art for art in data if not artist or artist.lower() in art['artist_title'].lower()]


def show_artwork_details(artwork):
    print(f"\nНазвание: {artwork.get('title')}")
    print(f"Автор: {artwork.get('artist_title')}")
    print(f"Дата: {artwork.get('date_display')}")
    print(f"Носитель: {artwork.get('medium_display')}\n")


def main():
    page = 1

    while True:
        artist = input("Введите имя художника для фильтрации или Enter для всех: ")
        artworks = fetch_artworks(page, artist)

        for i, art in enumerate(artworks, 1):
            print(f"{i}. {art['title']}")

        choice = input("\nВведите номер для деталей, N для след. стр, P для пред. стр или Q для выхода: ").lower()

        if choice.isdigit() and 1 <= int(choice) <= len(artworks):
            show_artwork_details(artworks[int(choice) - 1])
        elif choice == 'n':
            page += 1
        elif choice == 'p' and page > 1:
            page -= 1
        elif choice == 'q':
            break


if __name__ == "__main__":
    main()

"""# Задание 3

Задача: Создать программу по управлению портфелем криптовалют

Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.

Требования:
Получение текущих цен на криптовалюты:

Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.

Управление портфелем:

- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.
- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).

Отслеживание изменения цен:

- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.
- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.

Поиск исторических данных о ценах:

- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.
- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).

Взаимодействие с пользователем:

- Реализуйте интерфейс командной строки для ввода данных пользователем.
- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.
"""



"""# Дополнительно: Задание 4

Задание 4: Проектное

Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!


Критерии приемки результата:

- Проект включает в себя не менее 5 возможостей для пользователя
- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку
- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)
- Проект должен обязательно включать в себя ряд используемых конструкции:
    - Функции
    - Условные конструкции
    - Ввод/вывод
    - Словари/Списки
- Допускается использование библиотек:
    - requests
    - datetime
    - random

**Здесь добавьте описание вашего проекта**
"""

#  А здесь код