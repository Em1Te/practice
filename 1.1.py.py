# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17E49bA7CduLbpMw3s28N06Eidq2oeNDN

**ФИО:**
"""

#Костоусов Егор Максимович

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee:
    def __init__(self, name, base_salary):
        self.name = name
        self.base_salary = base_salary

    def base_calc(self):
        return self.base_salary

    def base(self):
        return f"{self.name}, Базовая зарплата: {self.base_salary}"


class Manager(Employee):
    def __init__(self, name, base_salary, sales):
        super().__init__(name, base_salary)
        self.sales = sales

    def manager_calc(self):
        return self.base_salary + self.sales * 100

    def manager_salary(self):
        return f"{self.name}, Повышенная зарплата: {self.manager_calc()}"


class Developer(Employee):
    def __init__(self, name, base_salary, quantity_project):
        super().__init__(name, base_salary)
        self.quantity_project = quantity_project

    def developer_calc(self):
        return self.base_salary + self.quantity_project * 10000

    def developer_salary(self):
        return f"{self.name}, Повышенная зарплата: {self.developer_calc()}"


if __name__ == "__main__":
    employee = Employee("Биба", 50000)
    manager = Manager("Боба", 50000, sales=100)
    developer = Developer("Биби", 50000, quantity_project=2)

    print(employee.base())
    print(manager.manager_salary())
    print(developer.developer_salary())

"""# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""

class Transport:
    def description(self):
        return 'sasas'

class Car(Transport):
    def description(self):
        return 'Малиновая лада'

class Bus:
    def description(self):
        return 'Филиал ада на земле'

class Subway:
    def description(self):
        return "Гордость Собянина"


car = Car()
bus = Bus()
subway = Subway()

    # Вызываем метод description для каждого объекта
print(car.description())
print(bus.description())
print(subway.description())

"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""

class Product:
    def __init__(self, name, price, stock, category):
        self.name = name
        self.price = price
        self.stock = stock
        self.category = category

    def availability(self, quantity):
        return self.stock >= quantity

    def remowe(self, quantity):
        if self.availability(quantity):
            self.stock -= quantity
            return True
        else:
            return False

    def __str__(self):
        return f'Название товара: {self.name},\nЦена: {self.price},\nНаличие: {self.stock},\nКатегория: {self.category}'


laptop = Product("Ноутбук", 1000, 10, 'Компутеры')
print(laptop)

"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""

import sys
import random

class SpaceShip:
    def __init__(self, fuel, hull, current_speed):
        self.fuel = fuel
        self.hull = hull
        self.current_speed = current_speed

    def quantity_fuel(self):
        if self.fuel <= 0:
            return f'Уровень топлива = {self.fuel}, нужна заправка'
        else:
            return f'Уровень топлива = {self.fuel}, можем лететь'

    def fill_up(self):
        if self.fuel >= 100:
            return 'Топливо полностью заполнено.'
        print('Насколько вы хотите заполнить бак:\n1)10\n2)50\n3)100')
        try:
            choice = int(input("Введите ваш выбор (1, 2, 3): "))
            if choice == 1:
                self.fuel += 10
            elif choice == 2:
                self.fuel += 50
            elif choice == 3:
                self.fuel += 100
            else:
                return 'Некорректный выбор'
            return f'Топливо успешно пополнено. Текущий уровень топлива: {self.fuel}'
        except ValueError:
            return 'Ошибка ввода. Введите число 1, 2 или 3.'

    def hull_condition(self):
        if self.hull == 0:
            return 'Корабль разрушен'
            sys.exit()
        elif self.hull < 20:
            return 'Корабль повреждён, необходим ремонт'
        else:
            return 'Корабль исправен'

    def repair(self, resources):
        if self.hull < 100 and self.hull > 0 and resources > 0:
            self.hull = 100
            return f'Корабль восстановлен\nСостояние = {self.hull}'
        elif resources == 0:
            return 'Недостаточно ресурсов для починки'
        return 'Корабль в хорошем состоянии'

    def speed(self):
        if self.hull > 50 and self.fuel > 50:
            self.current_speed = 1000
        elif self.hull < 50 and self.fuel > 50:
            self.current_speed = 400
        elif self.hull > 50 and self.fuel < 50:
            self.current_speed = 400
        elif self.fuel <= 0 or self.hull == 0:
            self.current_speed = 0
        else:
            self.current_speed = 200
        return f'Текущая скорость: {self.current_speed}'


class CrewMember:
    def __init__(self, name, role, health, skills):
        self.name = name
        self.role = role
        self.health = health
        self.skills = skills

    def status(self):
        return f'Член экипажа: {self.name}, роль: {self.role}, здоровье: {self.health}, навыки: {", ".join(self.skills)}'

    def heal(self, amount):
        self.health += amount
        if self.health > 100:
            self.health = 100
        return f'{self.name} восстановил здоровье. Текущее здоровье: {self.health}'

    def upgrade_skills(self, new_skills):
        self.skills.extend(new_skills)
        return f'{self.name} улучшил навыки. Новые навыки: {", ".join(self.skills)}'


class Mission:
    def __init__(self, objectives, resources, events):
        self.objectives = objectives
        self.resources = resources
        self.events = events

    def start_mission(self):
        print(f'Запуск миссии: {", ".join(self.objectives)}')
        print(f'Ресурсы на борту: {self.resources}')
        print(f'Возможные события: {", ".join(self.events)}')

    def encounter_event(self, event, spaceship):
        if event in self.events:
            print(f'Произошло событие: {event}')
            if event == "Астероидный пояс":
                spaceship.hull -= 20
                self.resources -= 10
                print(f'Вы потеряли 20 прочности корабля и 10 ресурсов при столкновении с астероидами.')
            elif event == "Поломка оборудования":
                spaceship.hull -= 10
                self.resources -= 5
                print(f'Поломка оборудования. Потеряно 10 прочности и 5 ресурсов.')
        else:
            print('Неизвестное событие')

    def collect_resources(self):
        collected_fuel = random.randint(10, 50)
        collected_resources = random.randint(1, 5)
        self.fuel += collected_fuel
        if self.fuel > 100:
            self.fuel = 100  # Ограничение на топливо
        return collected_fuel, collected_resources


''' основной код игры '''
def play_game():
    '''необходимо задать начальные значения'''
    spaceship = SpaceShip(fuel=100, hull=100, current_speed=1000)
    crew_member_1 = CrewMember(name="Иван", role="Пилот", health=100, skills=["Навигация", "Пилотирование"])
    crew_member_2 = CrewMember(name="Анастасия", role="Инженер", health=80, skills=["Ремонт", "Электроника"])

    mission = Mission(objectives=["Исследование планеты", "Поиск ресурсов"], resources=100, events=["Астероидный пояс", "Поломка оборудования"])
    mission.start_mission()

    while True:
        print("\n--- Статус корабля ---")
        print(spaceship.quantity_fuel())
        print(spaceship.hull_condition())
        print(spaceship.speed())
        print(crew_member_1.status())
        print(crew_member_2.status())

        action = input("\nЧто вы хотите сделать?\n1) Собрать ресурсы и топливо\n2) Заправить корабль\n3) Отремонтировать корабль\n4) Продолжить миссию\n5) Выйти\nВведите номер действия: ")

        # Снимаем топливо за каждое действие
        if spaceship.fuel <= 0:
            print("У вас закончилось топливо.")
            break

        if action == '1':
            collected_fuel, collected_resources = spaceship.collect_resources()
            spaceship.fuel -= 10  # Снимаем топливо за сбор
            print(f'Вы собрали {collected_fuel} топлива и {collected_resources} ресурсов. Топливо теперь = {spaceship.fuel}')
        elif action == '2':
            print(spaceship.fill_up())
            spaceship.fuel -= 5  # Снимаем топливо за заправку
        elif action == '3':
            resources_for_repair = int(input("Введите количество ресурсов для ремонта: "))
            spaceship.fuel -= 5  # Снимаем топливо за ремонт
            print(spaceship.repair(resources_for_repair))
        elif action == '4':
            # Случайное событие
            event = random.choice(mission.events)
            mission.encounter_event(event, spaceship)
            spaceship.fuel -= 10  # Снимаем топливо за продолжение миссии
        elif action == '5':
            print("Выход из игры.")
            break
        else:
            print("Некорректный выбор. Попробуйте снова.")

        # Случайное событие после каждого действия
        event = random.choice(mission.events)
        mission.encounter_event(event, spaceship)

        # Проверка на состояние корабля и завершение игры
        if spaceship.hull <= 0 or spaceship.fuel <= 0:
            print("Корабль не может продолжать миссию. Игра завершена.")
            break

# Запуск игры
play_game()

"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

