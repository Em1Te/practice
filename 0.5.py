# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_ADTRpDPNcFIIdYAgBgrelvI1Wjc9z_

ФИО:
"""

Костоусов Егор Максимович

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

dictionary = {"Alice": 25,
              "Bob": 30,
              "Charlie": 35}
name = input('Введите имя:')
if name in dictionary:
  print(f'{name} {dictionary[name]}')

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

def calc(numbers):
  sum = 0
  for num in numbers:
    if num % 2 == 0:
      sum += num
  return sum
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(calc(numbers))

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
yellow = [fruit for fruit, color in fruits_and_colors.items() if color == "yellow"]
print("Yellow fruits:")
for fruit in yellow:
    print(fruit)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

dictionary = {"a": 1,
              "b": 2,
              "c": 3}

def expand(dictionary):
    reversed_dict = {}
    for letter, number in dictionary.items():
        reversed_dict[number] = letter
    return reversed_dict
result = expand(dictionary)
print(result)  # Вывод: {1: 'a', 2: 'b', 3: 'c'}

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество символов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""



"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}
def people_older_than_30(people_info):
    result = []
    for name, info in people_info.items():
        if info['age'] > 30:
            result.append(name)
    return result
def city_population(people_info):
    city_count = {}
    for info in people_info.values():
        city = info['city']
        if city in city_count:
            city_count[city] += 1
        else:
            city_count[city] = 1
    return city_count
def people_by_occupation(people_info):
    occupation_dict = {}
    for name, info in people_info.items():
        occupation = info['occupation']
        if occupation in occupation_dict:
            occupation_dict[occupation].append(name)
        else:
            occupation_dict[occupation] = [name]
    return occupation_dict
people = people_older_than_30(people_info)
print("Люди старше 30 лет:", people)

cities = city_population(people_info)
print("Количество людей в городах:", cities)

occupations = people_by_occupation(people_info)
print("Люди по профессиям:", occupations)

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

